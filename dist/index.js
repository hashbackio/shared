'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountSettingSchema = exports.WatsonClassifierSchema = exports.AccountSettingPostBodySchema = exports.ZenDeskIntegrationSchema = exports.AccountIntegrationSchema = exports.TwitterFeedbackWithMaybeAnalysisSchema = exports.TwitterFeedbackSchema = exports.ZenDeskTicketWithMaybeAnalysisSchema = exports.ZenDeskTicketSchema = exports.ZenDeskTicketPostBodySchema = exports.EmailFeedbackWithMaybeAnalysisSchema = exports.EmailFeedbackSchema = exports.EmailFeedbackPostBodySchema = exports.WatsonClassifyResponseSchema = exports.FeedbackAnalysisSchema = exports.UserSchema = exports.EmailUserSchema = exports.TwitterUserSchema = exports.ZenDeskUserSchema = exports.SentimentAnalysisResponseSchema = exports.SentenceSchema = exports.CategorySchema = exports.SentimentSchema = exports.TextSpanSchema = exports.SupportedLanguageSchema = exports.getDynamoDbGlobalArn = exports.getTableNamePrefix = exports.getAnalyzeFeedbackTopicName = exports.getAnalyzeFeedbackSNS = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// https://github.com/benmosher/eslint-plugin-import/issues/921
/* eslint-disable import/named */


var _Arns = require('./Arns');

Object.defineProperty(exports, 'getAnalyzeFeedbackSNS', {
  enumerable: true,
  get: function get() {
    return _Arns.getAnalyzeFeedbackSNS;
  }
});
Object.defineProperty(exports, 'getAnalyzeFeedbackTopicName', {
  enumerable: true,
  get: function get() {
    return _Arns.getAnalyzeFeedbackTopicName;
  }
});
Object.defineProperty(exports, 'getTableNamePrefix', {
  enumerable: true,
  get: function get() {
    return _Arns.getTableNamePrefix;
  }
});
Object.defineProperty(exports, 'getDynamoDbGlobalArn', {
  enumerable: true,
  get: function get() {
    return _Arns.getDynamoDbGlobalArn;
  }
});

var _joiBrowser = require('joi-browser');

var _joiBrowser2 = _interopRequireDefault(_joiBrowser);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _YearMonthBucket = require('./YearMonthBucket');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ModelSavedFieldsSchema = {
  accountId: _joiBrowser2.default.string().required(),
  createdAt: _joiBrowser2.default.string().isoDate().required(),
  id: _joiBrowser2.default.string().guid().default(function () {
    return _uuid2.default.v4();
  }, 'uuid v4'),
  updatedAt: _joiBrowser2.default.string().isoDate()
};

var SupportedLanguageSchema = exports.SupportedLanguageSchema = _joiBrowser2.default.string().valid(['zh', 'zh-Hant', 'en', 'fr', 'de', 'it', 'ja', 'ko', 'pt', 'es']);

var TextSpanSchema = exports.TextSpanSchema = _joiBrowser2.default.object({
  beginOffset: _joiBrowser2.default.number().min(-1).required(),
  content: _joiBrowser2.default.string().required()
}).unknown();

var SentimentSchema = exports.SentimentSchema = _joiBrowser2.default.object({
  magnitude: _joiBrowser2.default.number().min(0).required(),
  score: _joiBrowser2.default.number().min(-1).max(1).required()
}).unknown();

var CategorySchema = exports.CategorySchema = _joiBrowser2.default.object({
  categoryName: _joiBrowser2.default.string().required(),
  confidence: _joiBrowser2.default.number().min(0).max(1).required()
}).unknown();

var SentenceSchema = exports.SentenceSchema = _joiBrowser2.default.object({
  sentiment: SentimentSchema.required(),
  text: TextSpanSchema.required()
}).unknown();

var SentimentAnalysisResponseSchema = exports.SentimentAnalysisResponseSchema = _joiBrowser2.default.object({
  documentSentiment: SentimentSchema.required(),
  language: SupportedLanguageSchema.required(),
  sentences: _joiBrowser2.default.array().items(SentenceSchema).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB')
}).unknown();

var ZenDeskUserSchema = exports.ZenDeskUserSchema = _joiBrowser2.default.object({
  email: _joiBrowser2.default.string().email(),
  id: _joiBrowser2.default.number().min(0).required(),
  name: _joiBrowser2.default.string().required()
}).unknown();

var TwitterUserSchema = exports.TwitterUserSchema = _joiBrowser2.default.object({
  avatarUrl: _joiBrowser2.default.string().uri().required(),
  id: _joiBrowser2.default.string().required(),
  username: _joiBrowser2.default.string().required()
}).unknown();

var EmailUserSchema = exports.EmailUserSchema = _joiBrowser2.default.object({
  id: _joiBrowser2.default.string().email().required()
}).unknown();

var UserSchema = exports.UserSchema = _joiBrowser2.default.compile([TwitterUserSchema, EmailUserSchema, ZenDeskUserSchema]);

var FeedbackAnalysisSchema = exports.FeedbackAnalysisSchema = _joiBrowser2.default.object(_extends({}, ModelSavedFieldsSchema, {
  contentSentiment: SentimentSchema.required(),
  documentCategorization: _joiBrowser2.default.array().items(CategorySchema).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  feedbackId: _joiBrowser2.default.string().guid().default(function () {
    return _uuid2.default.v4();
  }, 'uuid v4'),
  feedbackType: _joiBrowser2.default.string().allow(['email', 'twitter', 'zenDesk']).required(),
  sentences: _joiBrowser2.default.array().items(SentenceSchema.keys({
    categorization: _joiBrowser2.default.array().items(CategorySchema).default(function () {
      return [];
    }, 'Do not allow undefined or null to come out of the DB')
  }).required()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  topDocumentCategories: _joiBrowser2.default.array().items(_joiBrowser2.default.string()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  topSentenceCategories: _joiBrowser2.default.array().items(_joiBrowser2.default.string()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  user: UserSchema,
  userId: _joiBrowser2.default.string().required()
})).unknown().required();

var WatsonClassifyResponseSchema = exports.WatsonClassifyResponseSchema = _joiBrowser2.default.object({
  classes: _joiBrowser2.default.array().items(_joiBrowser2.default.object({
    class_name: _joiBrowser2.default.string().required(),
    confidence: _joiBrowser2.default.number().min(0).max(1).required()
  }).unknown()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  classifier_id: _joiBrowser2.default.string().required(),
  text: _joiBrowser2.default.string().required(),
  top_class: _joiBrowser2.default.string().required(),
  url: _joiBrowser2.default.string().uri({ allowRelative: true }).required()
});

var EmailFeedbackPostBodySchema = exports.EmailFeedbackPostBodySchema = _joiBrowser2.default.object({
  content: _joiBrowser2.default.string().required(),
  emailSentDate: _joiBrowser2.default.string().isoDate().required(),
  from: _joiBrowser2.default.string().email().required(),
  subject: _joiBrowser2.default.string().required(),
  to: _joiBrowser2.default.string().email().required()
}).unknown().required();

var EmailFeedbackSchema = exports.EmailFeedbackSchema = EmailFeedbackPostBodySchema.keys(_extends({}, ModelSavedFieldsSchema)).unknown().required();

var EmailFeedbackWithMaybeAnalysisSchema = exports.EmailFeedbackWithMaybeAnalysisSchema = EmailFeedbackSchema.keys({
  analysis: FeedbackAnalysisSchema
}).unknown().required();

var ZenDeskTicketPostBodySchema = exports.ZenDeskTicketPostBodySchema = _joiBrowser2.default.object({
  description: _joiBrowser2.default.string().required(),
  ticketId: _joiBrowser2.default.number().required(),
  title: _joiBrowser2.default.string().required(),
  user: ZenDeskUserSchema.required()
}).unknown().required();

var ZenDeskTicketSchema = exports.ZenDeskTicketSchema = ZenDeskTicketPostBodySchema.keys(_extends({}, ModelSavedFieldsSchema)).unknown().required();

var ZenDeskTicketWithMaybeAnalysisSchema = exports.ZenDeskTicketWithMaybeAnalysisSchema = ZenDeskUserSchema.keys({
  analysis: FeedbackAnalysisSchema
}).unknown().required();

var TwitterFeedbackSchema = exports.TwitterFeedbackSchema = _joiBrowser2.default.object(_extends({}, ModelSavedFieldsSchema, {
  statusId: _joiBrowser2.default.string().required(),
  user: TwitterUserSchema.required()
})).unknown().required();

var TwitterFeedbackWithMaybeAnalysisSchema = exports.TwitterFeedbackWithMaybeAnalysisSchema = TwitterFeedbackSchema.keys({
  analysis: FeedbackAnalysisSchema
}).unknown().required();

var AccountIntegrationSchema = exports.AccountIntegrationSchema = _joiBrowser2.default.object({
  status: _joiBrowser2.default.string().valid(['disconnected', 'awaitingApproval', 'connected']).required(),
  token: _joiBrowser2.default.string().required()
}).optionalKeys('token').unknown().required();

var ZenDeskIntegrationSchema = exports.ZenDeskIntegrationSchema = AccountIntegrationSchema.keys({
  fieldId: _joiBrowser2.default.number(),
  subdomain: _joiBrowser2.default.string().allow('').required(),
  ticketImport: _joiBrowser2.default.object({
    inProgress: _joiBrowser2.default.boolean().required(),
    nextPage: _joiBrowser2.default.number().required()
  }).unknown().default({ inProgress: false, nextPage: 0 }, 'Defaults to no in progress import and Unix Epoch as the next page')
});

var AccountSettingPostBodySchema = exports.AccountSettingPostBodySchema = _joiBrowser2.default.object({
  twitterSearches: _joiBrowser2.default.array().items(_joiBrowser2.default.string()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB')
}).unknown().required();

var WatsonClassifierSchema = exports.WatsonClassifierSchema = _joiBrowser2.default.object({
  classifier_id: _joiBrowser2.default.string().required(),
  created: _joiBrowser2.default.string().required(),
  language: _joiBrowser2.default.string().required(),
  name: _joiBrowser2.default.string().required(),
  status: _joiBrowser2.default.string().valid(['Non Existent', 'Training', 'Failed', 'Available', 'Unavailable']).required(),
  status_description: _joiBrowser2.default.string().required(),
  url: _joiBrowser2.default.string().required()
});

var AccountSettingSchema = exports.AccountSettingSchema = _joiBrowser2.default.object(_extends({}, ModelSavedFieldsSchema, {
  apiToken: _joiBrowser2.default.string().guid(),
  feedbackUsageByDate: _joiBrowser2.default.object().pattern(_YearMonthBucket.YearMonthBucketRegex, _joiBrowser2.default.number().min(0).required()).required(),
  id: _joiBrowser2.default.string().required(),
  integrations: _joiBrowser2.default.object({ zenDesk: ZenDeskIntegrationSchema }).required(),
  tier: _joiBrowser2.default.string().valid(['notApproved', 'free']).required(),
  twitterSearches: _joiBrowser2.default.array().items(_joiBrowser2.default.string()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  watsonClassifier: WatsonClassifierSchema
})).unknown().required();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,