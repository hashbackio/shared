'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountSettingSchema = exports.AccountSettingPostBodySchema = exports.ZenDeskIntegrationSchema = exports.AccountIntegrationSchema = exports.TwitterFeedbackWithMaybeAnalysisSchema = exports.TwitterFeedbackSchema = exports.EmailFeedbackWithMaybeAnalysisSchema = exports.EmailFeedbackSchema = exports.EmailFeedbackPostBodySchema = exports.WatsonClassifyResponseSchema = exports.FeedbackAnalysisSchema = exports.UserSchema = exports.EmailUserSchema = exports.TwitterUserSchema = exports.SentimentAnalysisResponseSchema = exports.SentenceSchema = exports.CategorySchema = exports.SentimentSchema = exports.TextSpanSchema = exports.SupportedLanguageSchema = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// https://github.com/benmosher/eslint-plugin-import/issues/921
/* eslint-disable import/named */


var _joiBrowser = require('joi-browser');

var _joiBrowser2 = _interopRequireDefault(_joiBrowser);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _YearMonthBucket = require('./YearMonthBucket');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-enable */

var ModelSavedFieldsSchema = {
  accountId: _joiBrowser2.default.string().required(),
  createdAt: _joiBrowser2.default.string().isoDate().required(),
  id: _joiBrowser2.default.string().guid().default(function () {
    return _uuid2.default.v4();
  }, 'uuid v4'),
  updatedAt: _joiBrowser2.default.string().isoDate()
};

var SupportedLanguageSchema = exports.SupportedLanguageSchema = _joiBrowser2.default.string().valid(['zh', 'zh-Hant', 'en', 'fr', 'de', 'it', 'ja', 'ko', 'pt', 'es']);

var TextSpanSchema = exports.TextSpanSchema = _joiBrowser2.default.object({
  beginOffset: _joiBrowser2.default.number().min(-1).required(),
  content: _joiBrowser2.default.string().required()
}).unknown();

var SentimentSchema = exports.SentimentSchema = _joiBrowser2.default.object({
  magnitude: _joiBrowser2.default.number().min(0).required(),
  score: _joiBrowser2.default.number().min(-1).max(1).required()
}).unknown();

var CategorySchema = exports.CategorySchema = _joiBrowser2.default.object({
  categoryName: _joiBrowser2.default.string().required(),
  confidence: _joiBrowser2.default.number().min(0).max(1).required()
}).unknown();

var SentenceSchema = exports.SentenceSchema = _joiBrowser2.default.object({
  sentiment: SentimentSchema.required(),
  text: TextSpanSchema.required()
}).unknown();

var SentimentAnalysisResponseSchema = exports.SentimentAnalysisResponseSchema = _joiBrowser2.default.object({
  documentSentiment: SentimentSchema.required(),
  language: SupportedLanguageSchema.required(),
  sentences: _joiBrowser2.default.array().items(SentenceSchema).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB')
}).unknown();

var TwitterUserSchema = exports.TwitterUserSchema = _joiBrowser2.default.object({
  avatarUrl: _joiBrowser2.default.string().uri().required(),
  id: _joiBrowser2.default.string().required(),
  username: _joiBrowser2.default.string().required()
}).unknown();

var EmailUserSchema = exports.EmailUserSchema = _joiBrowser2.default.object({
  id: _joiBrowser2.default.string().email().required()
}).unknown();

var UserSchema = exports.UserSchema = _joiBrowser2.default.compile([TwitterUserSchema, EmailUserSchema]);

var FeedbackAnalysisSchema = exports.FeedbackAnalysisSchema = _joiBrowser2.default.object(_extends({}, ModelSavedFieldsSchema, {
  contentSentiment: SentimentSchema.required(),
  documentCategorization: _joiBrowser2.default.array().items(CategorySchema).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  feedbackId: _joiBrowser2.default.string().guid().default(function () {
    return _uuid2.default.v4();
  }, 'uuid v4'),
  feedbackType: _joiBrowser2.default.string().allow(['email', 'twitter']).required(),
  sentences: _joiBrowser2.default.array().items(SentenceSchema.keys({
    categorization: _joiBrowser2.default.array().items(CategorySchema).default(function () {
      return [];
    }, 'Do not allow undefined or null to come out of the DB')
  }).required()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  topDocumentCategories: _joiBrowser2.default.array().items(_joiBrowser2.default.string()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  topSentenceCategories: _joiBrowser2.default.array().items(_joiBrowser2.default.string()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  user: UserSchema,
  userId: _joiBrowser2.default.string().required()
})).unknown().required();

var WatsonClassifyResponseSchema = exports.WatsonClassifyResponseSchema = _joiBrowser2.default.object({
  classes: _joiBrowser2.default.array().items(_joiBrowser2.default.object({
    class_name: _joiBrowser2.default.string().required(),
    confidence: _joiBrowser2.default.number().min(0).max(1).required()
  }).unknown()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB'),
  classifier_id: _joiBrowser2.default.string().required(),
  text: _joiBrowser2.default.string().required(),
  top_class: _joiBrowser2.default.string().required(),
  url: _joiBrowser2.default.string().uri({ allowRelative: true }).required()
});

var EmailFeedbackPostBodySchema = exports.EmailFeedbackPostBodySchema = _joiBrowser2.default.object({
  content: _joiBrowser2.default.string().required(),
  emailSentDate: _joiBrowser2.default.string().isoDate().required(),
  from: _joiBrowser2.default.string().email().required(),
  subject: _joiBrowser2.default.string().required(),
  to: _joiBrowser2.default.string().email().required()
}).unknown().required();

var EmailFeedbackSchema = exports.EmailFeedbackSchema = EmailFeedbackPostBodySchema.keys(_extends({}, ModelSavedFieldsSchema)).unknown().required();

var EmailFeedbackWithMaybeAnalysisSchema = exports.EmailFeedbackWithMaybeAnalysisSchema = EmailFeedbackSchema.keys({
  analysis: FeedbackAnalysisSchema
}).unknown().required();

var TwitterFeedbackSchema = exports.TwitterFeedbackSchema = _joiBrowser2.default.object(_extends({}, ModelSavedFieldsSchema, {
  statusId: _joiBrowser2.default.string().required(),
  user: TwitterUserSchema.required()
})).unknown().required();

var TwitterFeedbackWithMaybeAnalysisSchema = exports.TwitterFeedbackWithMaybeAnalysisSchema = TwitterFeedbackSchema.keys({
  analysis: FeedbackAnalysisSchema
}).unknown().required();

var AccountIntegrationSchema = exports.AccountIntegrationSchema = _joiBrowser2.default.object({
  status: _joiBrowser2.default.string().valid(['disconnected', 'awaitingApproval', 'connected']).required(),
  token: _joiBrowser2.default.string().required()
}).optionalKeys('token').unknown().required();

var ZenDeskIntegrationSchema = exports.ZenDeskIntegrationSchema = AccountIntegrationSchema.keys({
  subdomain: _joiBrowser2.default.string().allow('').required()
});

var AccountSettingPostBodySchema = exports.AccountSettingPostBodySchema = _joiBrowser2.default.object({
  twitterSearches: _joiBrowser2.default.array().items(_joiBrowser2.default.string()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB')
}).unknown().required();

var AccountSettingSchema = exports.AccountSettingSchema = _joiBrowser2.default.object(_extends({}, ModelSavedFieldsSchema, {
  feedbackUsageByDate: _joiBrowser2.default.object().pattern(_YearMonthBucket.YearMonthBucketRegex, _joiBrowser2.default.number().min(0).required()).required(),
  id: _joiBrowser2.default.string().required(),
  integrations: _joiBrowser2.default.object({ zenDesk: ZenDeskIntegrationSchema }).required(),
  tier: _joiBrowser2.default.string().valid(['notApproved', 'free']).required(),
  twitterSearches: _joiBrowser2.default.array().items(_joiBrowser2.default.string()).default(function () {
    return [];
  }, 'Do not allow undefined or null to come out of the DB')
})).unknown().required();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJNb2RlbFNhdmVkRmllbGRzU2NoZW1hIiwiYWNjb3VudElkIiwic3RyaW5nIiwicmVxdWlyZWQiLCJjcmVhdGVkQXQiLCJpc29EYXRlIiwiaWQiLCJndWlkIiwiZGVmYXVsdCIsInY0IiwidXBkYXRlZEF0IiwiU3VwcG9ydGVkTGFuZ3VhZ2VTY2hlbWEiLCJ2YWxpZCIsIlRleHRTcGFuU2NoZW1hIiwib2JqZWN0IiwiYmVnaW5PZmZzZXQiLCJudW1iZXIiLCJtaW4iLCJjb250ZW50IiwidW5rbm93biIsIlNlbnRpbWVudFNjaGVtYSIsIm1hZ25pdHVkZSIsInNjb3JlIiwibWF4IiwiQ2F0ZWdvcnlTY2hlbWEiLCJjYXRlZ29yeU5hbWUiLCJjb25maWRlbmNlIiwiU2VudGVuY2VTY2hlbWEiLCJzZW50aW1lbnQiLCJ0ZXh0IiwiU2VudGltZW50QW5hbHlzaXNSZXNwb25zZVNjaGVtYSIsImRvY3VtZW50U2VudGltZW50IiwibGFuZ3VhZ2UiLCJzZW50ZW5jZXMiLCJhcnJheSIsIml0ZW1zIiwiVHdpdHRlclVzZXJTY2hlbWEiLCJhdmF0YXJVcmwiLCJ1cmkiLCJ1c2VybmFtZSIsIkVtYWlsVXNlclNjaGVtYSIsImVtYWlsIiwiVXNlclNjaGVtYSIsImNvbXBpbGUiLCJGZWVkYmFja0FuYWx5c2lzU2NoZW1hIiwiY29udGVudFNlbnRpbWVudCIsImRvY3VtZW50Q2F0ZWdvcml6YXRpb24iLCJmZWVkYmFja0lkIiwiZmVlZGJhY2tUeXBlIiwiYWxsb3ciLCJrZXlzIiwiY2F0ZWdvcml6YXRpb24iLCJ0b3BEb2N1bWVudENhdGVnb3JpZXMiLCJ0b3BTZW50ZW5jZUNhdGVnb3JpZXMiLCJ1c2VyIiwidXNlcklkIiwiV2F0c29uQ2xhc3NpZnlSZXNwb25zZVNjaGVtYSIsImNsYXNzZXMiLCJjbGFzc19uYW1lIiwiY2xhc3NpZmllcl9pZCIsInRvcF9jbGFzcyIsInVybCIsImFsbG93UmVsYXRpdmUiLCJFbWFpbEZlZWRiYWNrUG9zdEJvZHlTY2hlbWEiLCJlbWFpbFNlbnREYXRlIiwiZnJvbSIsInN1YmplY3QiLCJ0byIsIkVtYWlsRmVlZGJhY2tTY2hlbWEiLCJFbWFpbEZlZWRiYWNrV2l0aE1heWJlQW5hbHlzaXNTY2hlbWEiLCJhbmFseXNpcyIsIlR3aXR0ZXJGZWVkYmFja1NjaGVtYSIsInN0YXR1c0lkIiwiVHdpdHRlckZlZWRiYWNrV2l0aE1heWJlQW5hbHlzaXNTY2hlbWEiLCJBY2NvdW50SW50ZWdyYXRpb25TY2hlbWEiLCJzdGF0dXMiLCJ0b2tlbiIsIm9wdGlvbmFsS2V5cyIsIlplbkRlc2tJbnRlZ3JhdGlvblNjaGVtYSIsInN1YmRvbWFpbiIsIkFjY291bnRTZXR0aW5nUG9zdEJvZHlTY2hlbWEiLCJ0d2l0dGVyU2VhcmNoZXMiLCJBY2NvdW50U2V0dGluZ1NjaGVtYSIsImZlZWRiYWNrVXNhZ2VCeURhdGUiLCJwYXR0ZXJuIiwiaW50ZWdyYXRpb25zIiwiemVuRGVzayIsInRpZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUtBO0FBQ0E7OztBQUpBOzs7O0FBQ0E7Ozs7QUFJQTs7OztBQUlBOztBQVNBLElBQU1BLHlCQUF5QjtBQUM3QkMsYUFBVyxxQkFBSUMsTUFBSixHQUFhQyxRQUFiLEVBRGtCO0FBRTdCQyxhQUFXLHFCQUFJRixNQUFKLEdBQ1JHLE9BRFEsR0FFUkYsUUFGUSxFQUZrQjtBQUs3QkcsTUFBSSxxQkFBSUosTUFBSixHQUNESyxJQURDLEdBRURDLE9BRkMsQ0FFTztBQUFBLFdBQU0sZUFBS0MsRUFBTCxFQUFOO0FBQUEsR0FGUCxFQUV3QixTQUZ4QixDQUx5QjtBQVE3QkMsYUFBVyxxQkFBSVIsTUFBSixHQUFhRyxPQUFiO0FBUmtCLENBQS9COztBQXVCTyxJQUFNTSw0REFBMEIscUJBQUlULE1BQUosR0FBYVUsS0FBYixDQUFtQixDQUN4RCxJQUR3RCxFQUV4RCxTQUZ3RCxFQUd4RCxJQUh3RCxFQUl4RCxJQUp3RCxFQUt4RCxJQUx3RCxFQU14RCxJQU53RCxFQU94RCxJQVB3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QVgsRUFBWCxFQUFrRDNFLFFBQWxELEVBWG9CO0FBWWxDb0YsUUFBTSxxQkFBSXJGLE1BQUosR0FDSFUsS0FERyxDQUNHLENBQUMsYUFBRCxFQUFnQixNQUFoQixDQURILEVBRUhULFFBRkcsRUFaNEI7QUFlbEM4RSxtQkFBaUIscUJBQUkvQyxLQUFKLEdBQ2RDLEtBRGMsQ0FDUixxQkFBSWpDLE1BQUosRUFEUSxFQUVkTSxPQUZjLENBRU47QUFBQSxXQUFNLEVBQU47QUFBQSxHQUZNLEVBRUksc0RBRko7QUFmaUIsSUFtQmpDVyxPQW5CaUMsR0FvQmpDaEIsUUFwQmlDLEVBQTdCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IEpvaSBmcm9tICdqb2ktYnJvd3Nlcic7XG5pbXBvcnQgdXVpZCBmcm9tICd1dWlkJztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlbm1vc2hlci9lc2xpbnQtcGx1Z2luLWltcG9ydC9pc3N1ZXMvOTIxXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbmFtZWQgKi9cbmltcG9ydCB7XG4gIFllYXJNb250aEJ1Y2tldFJlZ2V4LFxuICB0eXBlIFllYXJNb250aEJ1Y2tldFR5cGUsXG59IGZyb20gJy4vWWVhck1vbnRoQnVja2V0Jztcbi8qIGVzbGludC1lbmFibGUgKi9cblxuZXhwb3J0IHR5cGUgTW9kZWxTYXZlZEZpZWxkc1R5cGUgPSB7fFxuICBhY2NvdW50SWQ6IHN0cmluZyxcbiAgY3JlYXRlZEF0OiBzdHJpbmcsXG4gIGlkOiBzdHJpbmcsXG4gIHVwZGF0ZWRBdD86IHN0cmluZyxcbnx9O1xuXG5jb25zdCBNb2RlbFNhdmVkRmllbGRzU2NoZW1hID0ge1xuICBhY2NvdW50SWQ6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBjcmVhdGVkQXQ6IEpvaS5zdHJpbmcoKVxuICAgIC5pc29EYXRlKClcbiAgICAucmVxdWlyZWQoKSxcbiAgaWQ6IEpvaS5zdHJpbmcoKVxuICAgIC5ndWlkKClcbiAgICAuZGVmYXVsdCgoKSA9PiB1dWlkLnY0KCksICd1dWlkIHY0JyksXG4gIHVwZGF0ZWRBdDogSm9pLnN0cmluZygpLmlzb0RhdGUoKSxcbn07XG5cbmV4cG9ydCB0eXBlIFN1cHBvcnRlZExhbmd1YWdlVHlwZSA9XG4gIHwgJ3poJ1xuICB8ICd6aC1IYW50J1xuICB8ICdlbidcbiAgfCAnZnInXG4gIHwgJ2RlJ1xuICB8ICdpdCdcbiAgfCAnamEnXG4gIHwgJ2tvJ1xuICB8ICdwdCdcbiAgfCAnZXMnO1xuXG5leHBvcnQgY29uc3QgU3VwcG9ydGVkTGFuZ3VhZ2VTY2hlbWEgPSBKb2kuc3RyaW5nKCkudmFsaWQoW1xuICAnemgnLFxuICAnemgtSGFudCcsXG4gICdlbicsXG4gICdmcicsXG4gICdkZScsXG4gICdpdCcsXG4gICdqYScsXG4gICdrbycsXG4gICdwdCcsXG4gICdlcycsXG5dKTtcblxudHlwZSBUZXh0U3BhblR5cGUgPSB7XG4gIGJlZ2luT2Zmc2V0OiBudW1iZXIsXG4gIGNvbnRlbnQ6IHN0cmluZyxcbn07XG5cbmV4cG9ydCBjb25zdCBUZXh0U3BhblNjaGVtYSA9IEpvaS5vYmplY3Qoe1xuICBiZWdpbk9mZnNldDogSm9pLm51bWJlcigpXG4gICAgLm1pbigtMSlcbiAgICAucmVxdWlyZWQoKSxcbiAgY29udGVudDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG59KS51bmtub3duKCk7XG5cbmV4cG9ydCB0eXBlIFNlbnRpbWVudFR5cGUgPSB7fFxuICBtYWduaXR1ZGU6IG51bWJlcixcbiAgc2NvcmU6IG51bWJlcixcbnx9O1xuXG5leHBvcnQgY29uc3QgU2VudGltZW50U2NoZW1hID0gSm9pLm9iamVjdCh7XG4gIG1hZ25pdHVkZTogSm9pLm51bWJlcigpXG4gICAgLm1pbigwKVxuICAgIC5yZXF1aXJlZCgpLFxuICBzY29yZTogSm9pLm51bWJlcigpXG4gICAgLm1pbigtMSlcbiAgICAubWF4KDEpXG4gICAgLnJlcXVpcmVkKCksXG59KS51bmtub3duKCk7XG5cbmV4cG9ydCB0eXBlIENhdGVnb3J5Q29uZmlkZW5jZVR5cGUgPSB7XG4gIGNhdGVnb3J5TmFtZTogc3RyaW5nLFxuICBjb25maWRlbmNlOiBudW1iZXIsXG59O1xuXG5leHBvcnQgY29uc3QgQ2F0ZWdvcnlTY2hlbWEgPSBKb2kub2JqZWN0KHtcbiAgY2F0ZWdvcnlOYW1lOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgY29uZmlkZW5jZTogSm9pLm51bWJlcigpXG4gICAgLm1pbigwKVxuICAgIC5tYXgoMSlcbiAgICAucmVxdWlyZWQoKSxcbn0pLnVua25vd24oKTtcblxuZXhwb3J0IHR5cGUgU2VudGVuY2VUeXBlID0ge3xcbiAgc2VudGltZW50OiBTZW50aW1lbnRUeXBlLFxuICB0ZXh0OiBUZXh0U3BhblR5cGUsXG58fTtcblxuZXhwb3J0IGNvbnN0IFNlbnRlbmNlU2NoZW1hID0gSm9pLm9iamVjdCh7XG4gIHNlbnRpbWVudDogU2VudGltZW50U2NoZW1hLnJlcXVpcmVkKCksXG4gIHRleHQ6IFRleHRTcGFuU2NoZW1hLnJlcXVpcmVkKCksXG59KS51bmtub3duKCk7XG5cbmV4cG9ydCB0eXBlIFNlbnRpbWVudEFuYWx5c2lzUmVzcG9uc2VUeXBlID0ge3xcbiAgZG9jdW1lbnRTZW50aW1lbnQ6IFNlbnRpbWVudFR5cGUsXG4gIGxhbmd1YWdlOiBTdXBwb3J0ZWRMYW5ndWFnZVR5cGUsXG4gIHNlbnRlbmNlczogU2VudGVuY2VUeXBlW10sXG58fTtcblxuZXhwb3J0IGNvbnN0IFNlbnRpbWVudEFuYWx5c2lzUmVzcG9uc2VTY2hlbWEgPSBKb2kub2JqZWN0KHtcbiAgZG9jdW1lbnRTZW50aW1lbnQ6IFNlbnRpbWVudFNjaGVtYS5yZXF1aXJlZCgpLFxuICBsYW5ndWFnZTogU3VwcG9ydGVkTGFuZ3VhZ2VTY2hlbWEucmVxdWlyZWQoKSxcbiAgc2VudGVuY2VzOiBKb2kuYXJyYXkoKVxuICAgIC5pdGVtcyhTZW50ZW5jZVNjaGVtYSlcbiAgICAuZGVmYXVsdCgoKSA9PiBbXSwgJ0RvIG5vdCBhbGxvdyB1bmRlZmluZWQgb3IgbnVsbCB0byBjb21lIG91dCBvZiB0aGUgREInKSxcbn0pLnVua25vd24oKTtcblxuZXhwb3J0IHR5cGUgRmVlZGJhY2tUeXBlID0gJ2VtYWlsJyB8ICd0d2l0dGVyJztcblxuZXhwb3J0IHR5cGUgVHdpdHRlclVzZXJUeXBlID0ge3xcbiAgYXZhdGFyVXJsOiBzdHJpbmcsXG4gIGlkOiBzdHJpbmcsXG4gIHVzZXJuYW1lOiBzdHJpbmcsXG58fTtcblxuZXhwb3J0IGNvbnN0IFR3aXR0ZXJVc2VyU2NoZW1hID0gSm9pLm9iamVjdCh7XG4gIGF2YXRhclVybDogSm9pLnN0cmluZygpXG4gICAgLnVyaSgpXG4gICAgLnJlcXVpcmVkKCksXG4gIGlkOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgdXNlcm5hbWU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxufSkudW5rbm93bigpO1xuXG5leHBvcnQgdHlwZSBFbWFpbFVzZXJUeXBlID0ge3xcbiAgaWQ6IHN0cmluZyxcbnx9O1xuXG5leHBvcnQgY29uc3QgRW1haWxVc2VyU2NoZW1hID0gSm9pLm9iamVjdCh7XG4gIGlkOiBKb2kuc3RyaW5nKClcbiAgICAuZW1haWwoKVxuICAgIC5yZXF1aXJlZCgpLFxufSkudW5rbm93bigpO1xuXG5leHBvcnQgdHlwZSBVc2VyVHlwZSA9IEVtYWlsVXNlclR5cGUgfCBUd2l0dGVyVXNlclR5cGU7XG5cbmV4cG9ydCBjb25zdCBVc2VyU2NoZW1hID0gSm9pLmNvbXBpbGUoW1R3aXR0ZXJVc2VyU2NoZW1hLCBFbWFpbFVzZXJTY2hlbWFdKTtcblxuZXhwb3J0IHR5cGUgRmVlZGJhY2tTZW50aW1lbnRBbmRDYXRlZ29yaXphdGlvblR5cGUgPSB7fFxuICBjb250ZW50U2VudGltZW50OiBTZW50aW1lbnRUeXBlLFxuICBkb2N1bWVudENhdGVnb3JpemF0aW9uOiBDYXRlZ29yeUNvbmZpZGVuY2VUeXBlW10sXG4gIHNlbnRlbmNlczogQXJyYXk8e1xuICAgIGNhdGVnb3JpemF0aW9uOiBDYXRlZ29yeUNvbmZpZGVuY2VUeXBlW10sXG4gICAgLi4uU2VudGVuY2VUeXBlLFxuICB9PixcbiAgdG9wRG9jdW1lbnRDYXRlZ29yaWVzOiBBcnJheTxzdHJpbmc+LFxuICB0b3BTZW50ZW5jZUNhdGVnb3JpZXM6IEFycmF5PHN0cmluZz4sXG58fTtcblxuZXhwb3J0IHR5cGUgRmVlZGJhY2tBbmFseXNpc1Vuc2F2ZWRUeXBlID0ge3xcbiAgLi4uRmVlZGJhY2tTZW50aW1lbnRBbmRDYXRlZ29yaXphdGlvblR5cGUsXG4gIGFjY291bnRJZDogc3RyaW5nLFxuICBmZWVkYmFja0lkOiBzdHJpbmcsXG4gIGZlZWRiYWNrVHlwZTogRmVlZGJhY2tUeXBlLFxuICB1c2VyOiBVc2VyVHlwZSxcbiAgdXNlcklkOiBzdHJpbmcsXG58fTtcblxuZXhwb3J0IHR5cGUgRmVlZGJhY2tBbmFseXNpc1R5cGUgPSB7XG4gIC4uLkZlZWRiYWNrQW5hbHlzaXNVbnNhdmVkVHlwZSxcbiAgLi4uTW9kZWxTYXZlZEZpZWxkc1R5cGUsXG59O1xuXG5leHBvcnQgY29uc3QgRmVlZGJhY2tBbmFseXNpc1NjaGVtYSA9IEpvaS5vYmplY3Qoe1xuICAuLi5Nb2RlbFNhdmVkRmllbGRzU2NoZW1hLFxuICBjb250ZW50U2VudGltZW50OiBTZW50aW1lbnRTY2hlbWEucmVxdWlyZWQoKSxcbiAgZG9jdW1lbnRDYXRlZ29yaXphdGlvbjogSm9pLmFycmF5KClcbiAgICAuaXRlbXMoQ2F0ZWdvcnlTY2hlbWEpXG4gICAgLmRlZmF1bHQoKCkgPT4gW10sICdEbyBub3QgYWxsb3cgdW5kZWZpbmVkIG9yIG51bGwgdG8gY29tZSBvdXQgb2YgdGhlIERCJyksXG4gIGZlZWRiYWNrSWQ6IEpvaS5zdHJpbmcoKVxuICAgIC5ndWlkKClcbiAgICAuZGVmYXVsdCgoKSA9PiB1dWlkLnY0KCksICd1dWlkIHY0JyksXG4gIGZlZWRiYWNrVHlwZTogSm9pLnN0cmluZygpXG4gICAgLmFsbG93KFsnZW1haWwnLCAndHdpdHRlciddKVxuICAgIC5yZXF1aXJlZCgpLFxuICBzZW50ZW5jZXM6IEpvaS5hcnJheSgpXG4gICAgLml0ZW1zKFxuICAgICAgU2VudGVuY2VTY2hlbWEua2V5cyh7XG4gICAgICAgIGNhdGVnb3JpemF0aW9uOiBKb2kuYXJyYXkoKVxuICAgICAgICAgIC5pdGVtcyhDYXRlZ29yeVNjaGVtYSlcbiAgICAgICAgICAuZGVmYXVsdChcbiAgICAgICAgICAgICgpID0+IFtdLFxuICAgICAgICAgICAgJ0RvIG5vdCBhbGxvdyB1bmRlZmluZWQgb3IgbnVsbCB0byBjb21lIG91dCBvZiB0aGUgREInXG4gICAgICAgICAgKSxcbiAgICAgIH0pLnJlcXVpcmVkKClcbiAgICApXG4gICAgLmRlZmF1bHQoKCkgPT4gW10sICdEbyBub3QgYWxsb3cgdW5kZWZpbmVkIG9yIG51bGwgdG8gY29tZSBvdXQgb2YgdGhlIERCJyksXG4gIHRvcERvY3VtZW50Q2F0ZWdvcmllczogSm9pLmFycmF5KClcbiAgICAuaXRlbXMoSm9pLnN0cmluZygpKVxuICAgIC5kZWZhdWx0KCgpID0+IFtdLCAnRG8gbm90IGFsbG93IHVuZGVmaW5lZCBvciBudWxsIHRvIGNvbWUgb3V0IG9mIHRoZSBEQicpLFxuICB0b3BTZW50ZW5jZUNhdGVnb3JpZXM6IEpvaS5hcnJheSgpXG4gICAgLml0ZW1zKEpvaS5zdHJpbmcoKSlcbiAgICAuZGVmYXVsdCgoKSA9PiBbXSwgJ0RvIG5vdCBhbGxvdyB1bmRlZmluZWQgb3IgbnVsbCB0byBjb21lIG91dCBvZiB0aGUgREInKSxcbiAgdXNlcjogVXNlclNjaGVtYSxcbiAgdXNlcklkOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbn0pXG4gIC51bmtub3duKClcbiAgLnJlcXVpcmVkKCk7XG5cbmV4cG9ydCB0eXBlIFdhdHNvbkNsYXNzaWZ5UmVzcG9uc2VUeXBlID0ge1xuICBjbGFzc2VzOiBBcnJheTx7IGNsYXNzX25hbWU6IHN0cmluZywgY29uZmlkZW5jZTogbnVtYmVyIH0+LFxuICBjbGFzc2lmaWVyX2lkOiBzdHJpbmcsXG4gIHRleHQ6IHN0cmluZyxcbiAgdG9wX2NsYXNzOiBzdHJpbmcsXG4gIHVybDogc3RyaW5nLFxufTtcblxuZXhwb3J0IGNvbnN0IFdhdHNvbkNsYXNzaWZ5UmVzcG9uc2VTY2hlbWEgPSBKb2kub2JqZWN0KHtcbiAgY2xhc3NlczogSm9pLmFycmF5KClcbiAgICAuaXRlbXMoXG4gICAgICBKb2kub2JqZWN0KHtcbiAgICAgICAgY2xhc3NfbmFtZTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gICAgICAgIGNvbmZpZGVuY2U6IEpvaS5udW1iZXIoKVxuICAgICAgICAgIC5taW4oMClcbiAgICAgICAgICAubWF4KDEpXG4gICAgICAgICAgLnJlcXVpcmVkKCksXG4gICAgICB9KS51bmtub3duKClcbiAgICApXG4gICAgLmRlZmF1bHQoKCkgPT4gW10sICdEbyBub3QgYWxsb3cgdW5kZWZpbmVkIG9yIG51bGwgdG8gY29tZSBvdXQgb2YgdGhlIERCJyksXG4gIGNsYXNzaWZpZXJfaWQ6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICB0ZXh0OiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgdG9wX2NsYXNzOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgdXJsOiBKb2kuc3RyaW5nKClcbiAgICAudXJpKHsgYWxsb3dSZWxhdGl2ZTogdHJ1ZSB9KVxuICAgIC5yZXF1aXJlZCgpLFxufSk7XG5cbmV4cG9ydCB0eXBlIEVtYWlsRmVlZGJhY2tQb3N0Qm9keVR5cGUgPSB7fFxuICBjb250ZW50OiBzdHJpbmcsXG4gIGVtYWlsU2VudERhdGU6IHN0cmluZyxcbiAgZnJvbTogc3RyaW5nLFxuICBzdWJqZWN0OiBzdHJpbmcsXG4gIHRvOiBzdHJpbmcsXG58fTtcblxuZXhwb3J0IGNvbnN0IEVtYWlsRmVlZGJhY2tQb3N0Qm9keVNjaGVtYSA9IEpvaS5vYmplY3Qoe1xuICBjb250ZW50OiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgZW1haWxTZW50RGF0ZTogSm9pLnN0cmluZygpXG4gICAgLmlzb0RhdGUoKVxuICAgIC5yZXF1aXJlZCgpLFxuICBmcm9tOiBKb2kuc3RyaW5nKClcbiAgICAuZW1haWwoKVxuICAgIC5yZXF1aXJlZCgpLFxuICBzdWJqZWN0OiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgdG86IEpvaS5zdHJpbmcoKVxuICAgIC5lbWFpbCgpXG4gICAgLnJlcXVpcmVkKCksXG59KVxuICAudW5rbm93bigpXG4gIC5yZXF1aXJlZCgpO1xuXG5leHBvcnQgdHlwZSBFbWFpbEZlZWRiYWNrVW5zYXZlZFR5cGUgPSB7fFxuICAuLi5FbWFpbEZlZWRiYWNrUG9zdEJvZHlUeXBlLFxuICBhY2NvdW50SWQ6IHN0cmluZyxcbnx9O1xuXG5leHBvcnQgdHlwZSBFbWFpbEZlZWRiYWNrVHlwZSA9IHtcbiAgLi4uRW1haWxGZWVkYmFja1Vuc2F2ZWRUeXBlLFxuICAuLi5Nb2RlbFNhdmVkRmllbGRzVHlwZSxcbn07XG5cbmV4cG9ydCBjb25zdCBFbWFpbEZlZWRiYWNrU2NoZW1hID0gRW1haWxGZWVkYmFja1Bvc3RCb2R5U2NoZW1hLmtleXMoe1xuICAuLi5Nb2RlbFNhdmVkRmllbGRzU2NoZW1hLFxufSlcbiAgLnVua25vd24oKVxuICAucmVxdWlyZWQoKTtcblxuZXhwb3J0IHR5cGUgRW1haWxGZWVkYmFja1dpdGhNYXliZUFuYWx5c2lzVHlwZSA9IHtcbiAgLi4uRW1haWxGZWVkYmFja1R5cGUsXG4gIGFuYWx5c2lzOiA/RmVlZGJhY2tBbmFseXNpc1R5cGUsXG59O1xuXG5leHBvcnQgY29uc3QgRW1haWxGZWVkYmFja1dpdGhNYXliZUFuYWx5c2lzU2NoZW1hID0gRW1haWxGZWVkYmFja1NjaGVtYS5rZXlzKHtcbiAgYW5hbHlzaXM6IEZlZWRiYWNrQW5hbHlzaXNTY2hlbWEsXG59KVxuICAudW5rbm93bigpXG4gIC5yZXF1aXJlZCgpO1xuXG5leHBvcnQgdHlwZSBUd2l0dGVyRmVlZGJhY2tVbnNhdmVkVHlwZSA9IHt8XG4gIGFjY291bnRJZDogc3RyaW5nLFxuICBzdGF0dXNJZDogc3RyaW5nLFxuICB1c2VyOiBUd2l0dGVyVXNlclR5cGUsXG58fTtcblxuZXhwb3J0IHR5cGUgVHdpdHRlckZlZWRiYWNrVHlwZSA9IHtcbiAgLi4uVHdpdHRlckZlZWRiYWNrVW5zYXZlZFR5cGUsXG4gIC4uLk1vZGVsU2F2ZWRGaWVsZHNUeXBlLFxufTtcblxuZXhwb3J0IGNvbnN0IFR3aXR0ZXJGZWVkYmFja1NjaGVtYSA9IEpvaS5vYmplY3Qoe1xuICAuLi5Nb2RlbFNhdmVkRmllbGRzU2NoZW1hLFxuICBzdGF0dXNJZDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIHVzZXI6IFR3aXR0ZXJVc2VyU2NoZW1hLnJlcXVpcmVkKCksXG59KVxuICAudW5rbm93bigpXG4gIC5yZXF1aXJlZCgpO1xuXG5leHBvcnQgdHlwZSBUd2l0dGVyRmVlZGJhY2tXaXRoTWF5YmVBbmFseXNpc1R5cGUgPSB7XG4gIC4uLlR3aXR0ZXJGZWVkYmFja1R5cGUsXG4gIGFuYWx5c2lzOiA/RmVlZGJhY2tBbmFseXNpc1R5cGUsXG59O1xuXG5leHBvcnQgY29uc3QgVHdpdHRlckZlZWRiYWNrV2l0aE1heWJlQW5hbHlzaXNTY2hlbWEgPSBUd2l0dGVyRmVlZGJhY2tTY2hlbWEua2V5cyhcbiAge1xuICAgIGFuYWx5c2lzOiBGZWVkYmFja0FuYWx5c2lzU2NoZW1hLFxuICB9XG4pXG4gIC51bmtub3duKClcbiAgLnJlcXVpcmVkKCk7XG5cbmV4cG9ydCB0eXBlIEFjY291bnRUaWVyVHlwZSA9ICdub3RBcHByb3ZlZCcgfCAnZnJlZSc7XG5cbmV4cG9ydCB0eXBlIEFjY291bnRJbnRlZ3JhdGlvblN0YXR1c1R5cGUgPVxuICB8ICdkaXNjb25uZWN0ZWQnXG4gIHwgJ2F3YWl0aW5nQXBwcm92YWwnXG4gIHwgJ2Nvbm5lY3RlZCc7XG5cbmV4cG9ydCB0eXBlIEFjY291bnRJbnRlZ3JhdGlvblR5cGUgPSB7fFxuICBzdGF0dXM6IEFjY291bnRJbnRlZ3JhdGlvblN0YXR1c1R5cGUsXG4gIHRva2VuPzogc3RyaW5nLFxufH07XG5cbmV4cG9ydCB0eXBlIFplbkRlc2tJbnRlZ3JhdGlvblR5cGUgPSB7XG4gIC4uLkFjY291bnRJbnRlZ3JhdGlvblR5cGUsXG4gIHN1YmRvbWFpbjogc3RyaW5nLFxufTtcblxuZXhwb3J0IGNvbnN0IEFjY291bnRJbnRlZ3JhdGlvblNjaGVtYSA9IEpvaS5vYmplY3Qoe1xuICBzdGF0dXM6IEpvaS5zdHJpbmcoKVxuICAgIC52YWxpZChbJ2Rpc2Nvbm5lY3RlZCcsICdhd2FpdGluZ0FwcHJvdmFsJywgJ2Nvbm5lY3RlZCddKVxuICAgIC5yZXF1aXJlZCgpLFxuICB0b2tlbjogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG59KVxuICAub3B0aW9uYWxLZXlzKCd0b2tlbicpXG4gIC51bmtub3duKClcbiAgLnJlcXVpcmVkKCk7XG5cbmV4cG9ydCBjb25zdCBaZW5EZXNrSW50ZWdyYXRpb25TY2hlbWEgPSBBY2NvdW50SW50ZWdyYXRpb25TY2hlbWEua2V5cyh7XG4gIHN1YmRvbWFpbjogSm9pLnN0cmluZygpXG4gICAgLmFsbG93KCcnKVxuICAgIC5yZXF1aXJlZCgpLFxufSk7XG5cbmV4cG9ydCB0eXBlIEFjY291bnRTZXR0aW5nUG9zdEJvZHlUeXBlID0ge3xcbiAgdHdpdHRlclNlYXJjaGVzOiBzdHJpbmdbXSxcbnx9O1xuXG5leHBvcnQgY29uc3QgQWNjb3VudFNldHRpbmdQb3N0Qm9keVNjaGVtYSA9IEpvaS5vYmplY3Qoe1xuICB0d2l0dGVyU2VhcmNoZXM6IEpvaS5hcnJheSgpXG4gICAgLml0ZW1zKEpvaS5zdHJpbmcoKSlcbiAgICAuZGVmYXVsdCgoKSA9PiBbXSwgJ0RvIG5vdCBhbGxvdyB1bmRlZmluZWQgb3IgbnVsbCB0byBjb21lIG91dCBvZiB0aGUgREInKSxcbn0pXG4gIC51bmtub3duKClcbiAgLnJlcXVpcmVkKCk7XG5cbmV4cG9ydCB0eXBlIEFjY291bnRTZXR0aW5nVW5zYXZlZFR5cGUgPSB7fFxuICAuLi5BY2NvdW50U2V0dGluZ1Bvc3RCb2R5VHlwZSxcbiAgYWNjb3VudElkOiBzdHJpbmcsXG4gIGZlZWRiYWNrVXNhZ2VCeURhdGU6IHtcbiAgICBba2V5OiBZZWFyTW9udGhCdWNrZXRUeXBlXTogbnVtYmVyLFxuICB9LFxuXG4gIGludGVncmF0aW9uczoge1xuICAgIHplbkRlc2s6IFplbkRlc2tJbnRlZ3JhdGlvblR5cGUsXG4gIH0sXG4gIHRpZXI6IEFjY291bnRUaWVyVHlwZSxcbnx9O1xuXG5leHBvcnQgdHlwZSBBY2NvdW50U2V0dGluZ1R5cGUgPSB7XG4gIC4uLkFjY291bnRTZXR0aW5nVW5zYXZlZFR5cGUsXG4gIC4uLk1vZGVsU2F2ZWRGaWVsZHNUeXBlLFxufTtcblxuZXhwb3J0IGNvbnN0IEFjY291bnRTZXR0aW5nU2NoZW1hID0gSm9pLm9iamVjdCh7XG4gIC4uLk1vZGVsU2F2ZWRGaWVsZHNTY2hlbWEsXG4gIGZlZWRiYWNrVXNhZ2VCeURhdGU6IEpvaS5vYmplY3QoKVxuICAgIC5wYXR0ZXJuKFxuICAgICAgWWVhck1vbnRoQnVja2V0UmVnZXgsXG4gICAgICBKb2kubnVtYmVyKClcbiAgICAgICAgLm1pbigwKVxuICAgICAgICAucmVxdWlyZWQoKVxuICAgIClcbiAgICAucmVxdWlyZWQoKSxcbiAgaWQ6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBpbnRlZ3JhdGlvbnM6IEpvaS5vYmplY3QoeyB6ZW5EZXNrOiBaZW5EZXNrSW50ZWdyYXRpb25TY2hlbWEgfSkucmVxdWlyZWQoKSxcbiAgdGllcjogSm9pLnN0cmluZygpXG4gICAgLnZhbGlkKFsnbm90QXBwcm92ZWQnLCAnZnJlZSddKVxuICAgIC5yZXF1aXJlZCgpLFxuICB0d2l0dGVyU2VhcmNoZXM6IEpvaS5hcnJheSgpXG4gICAgLml0ZW1zKEpvaS5zdHJpbmcoKSlcbiAgICAuZGVmYXVsdCgoKSA9PiBbXSwgJ0RvIG5vdCBhbGxvdyB1bmRlZmluZWQgb3IgbnVsbCB0byBjb21lIG91dCBvZiB0aGUgREInKSxcbn0pXG4gIC51bmtub3duKClcbiAgLnJlcXVpcmVkKCk7XG4iXX0=